----------  Problem Statement
Given a string s, partition it into all possible palindromic substrings such that each substring in the partition is a palindrome. Return all possible palindrome partitioning solutions.




------------------ Approach - Backtracking
Since we need to find all possible palindrome partitions, we use backtracking:

1️⃣ Understanding the Backtracking Process
Start at index 0 and try all possible substrings.
If a substring is a palindrome, recursively call for the remaining part of the string.
When we reach the end of the string, we have found a valid partition.
Backtrack to explore other partitions.
2️⃣ Helper Functions
isPalindrome(s, start, end) → Checks if s[start:end] is a palindrome.
backtrack(start, path, result, s) → Performs recursive partitioning.





class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> result;
        vector<string> path;
        backtrack(0, s, path, result);
        return result;
    }
    
private:
    void backtrack(int start, string& s, vector<string>& path, vector<vector<string>>& result) {
        if (start == s.size()) {
            result.push_back(path); // If we reached end, store valid partition
            return;
        }
        
        for (int end = start; end < s.size(); end++) {
            if (isPalindrome(s, start, end)) {
                path.push_back(s.substr(start, end - start + 1)); // Choose
                backtrack(end + 1, s, path, result); // Explore
                path.pop_back(); // Unchoose (backtrack)
            }
        }
    }
    
    bool isPalindrome(string& s, int start, int end) {
        while (start < end) {
            if (s[start++] != s[end--]) return false;
        }
        return true;
    }
};

