The Largest Rectangle in Histogram problem is a classic stack-based problem in monotonic stack techniques. The goal is to find the largest rectangle area 
that can be formed using contiguous bars of a given histogram.

Algorithm Explanation
Given an array heights[] representing the heights of histogram bars, we need to determine the largest rectangular area possible.

Key Observations:
The width of a rectangle is determined by the closest smaller heights on the left and right.
We use a monotonic increasing stack to efficiently find the nearest smaller elements.
Steps of the Algorithm:
Initialize an empty stack to keep track of indices of histogram bars.
Iterate through the array while maintaining a monotonic increasing order in the stack.
If the current bar is smaller than the top of the stack, it means we found a right boundary for the top stack element:
Pop from the stack, and compute the area using:
Height = height of the popped element.
Width = distance between the nearest smaller elements on the left and right.
Continue this process until all bars are processed.
Process any remaining bars in the stack to compute the final maximum area.


----------------- C++ Code Implementation

#include <bits/stdc++.h>
using namespace std;

int largestRectangleArea(vector<int>& heights) {
    stack<int> st; // Stack to store indices
    int maxArea = 0; 
    int n = heights.size();

    for (int i = 0; i <= n; i++) {
        while (!st.empty() && (i == n || heights[i] < heights[st.top()])) {
            int height = heights[st.top()];
            st.pop();
            int width = st.empty() ? i : i - st.top() - 1;
            maxArea = max(maxArea, height * width);
        }
        st.push(i);
    }
    return maxArea;
}

int main() {
    vector<int> heights = {2, 1, 5, 6, 2, 3};
    cout << "Largest Rectangle Area: " << largestRectangleArea(heights) << endl;
    return 0;
}
